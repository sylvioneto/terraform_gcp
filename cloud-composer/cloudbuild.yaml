steps:
# terraform steps
- id: 'tf init'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
    terraform init \
    -backend-config="bucket=$PROJECT_ID-tf-state" \
    -backend-config="prefix=terraform_gcp/cloud-composer"
  dir: terraform
      
- id: 'tf plan'
  name: 'hashicorp/terraform:1.0.0'
  args: 
  - plan
  dir: terraform

- id: 'tf apply'
  name: 'hashicorp/terraform:1.0.0'
  args: 
  - apply
  - -auto-approve
  dir: terraform

# gcloud steps
- id: 'copy sql dump'
  name: 'gcr.io/cloud-builders/gcloud-slim'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
    gsutil cp * gs://$PROJECT_ID-sql-backup
  dir: sql

- id: 'copy dags'
  name: 'gcr.io/cloud-builders/gcloud-slim'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
    export COMPOSER_BUCKET=$(gcloud composer environments describe composer-af2 --location us-east1 --format='value(config.dagGcsPrefix)')
    gsutil cp * $$COMPOSER_BUCKET
  dir: dags

- id: 'restore backup'
  name: 'gcr.io/cloud-builders/gcloud-slim'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    export DATABASE_INSTANCE=$(gcloud sql instances list --format='value(name)' --filter='labels.app:cloud-composer')
    export SERVICE_ACCOUNT=$(gcloud sql instances describe private-postgres-1cdaf4a0 --format='value(serviceAccountEmailAddress)')
    gsutil iam ch serviceAccount:$$SERVICE_ACCOUNT:objectAdmin gs://$PROJECT_ID-sql-backup
    gcloud sql import sql $$DATABASE_INSTANCE gs://$PROJECT_ID-sql-backup/postgres_dvdrental.sql --database=dvdrental --quiet

options:
  env:
    - TF_VAR_project_id=$PROJECT_ID
tags:
  - terraform
  - cloud-composer
  - plan-apply

timeout: 3600s
